import './App.svelte.css.proxy.js';
/* src/App.svelte generated by Svelte v3.44.3 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { onMount } from '../_snowpack/pkg/svelte.js';
import { Router, Route, Link } from "../_snowpack/pkg/svelte-routing.js";
import AllDids from "./pages/AllDids.svelte.js";
import SingleDid from "./pages/SingleDid.svelte.js";
import Form from "./pages/Form.svelte.js";

function create_default_slot_5(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "New Did";
			attr(button, "class", "btn2");
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (43:6) <Route path="/post/:id" let:params>
function create_default_slot_4(ctx) {
	let singledid;
	let current;

	singledid = new SingleDid({
			props: {
				dids: /*dids*/ ctx[1],
				id: /*params*/ ctx[3].id,
				url: baseURL,
				getDids: /*getDids*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(singledid.$$.fragment);
		},
		m(target, anchor) {
			mount_component(singledid, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const singledid_changes = {};
			if (dirty & /*dids*/ 2) singledid_changes.dids = /*dids*/ ctx[1];
			if (dirty & /*params*/ 8) singledid_changes.id = /*params*/ ctx[3].id;
			singledid.$set(singledid_changes);
		},
		i(local) {
			if (current) return;
			transition_in(singledid.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(singledid.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(singledid, detaching);
		}
	};
}

// (46:6) <Route path="/new">
function create_default_slot_3(ctx) {
	let form;
	let current;

	form = new Form({
			props: {
				dids: /*dids*/ ctx[1],
				url: baseURL,
				getDids: /*getDids*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(form.$$.fragment);
		},
		m(target, anchor) {
			mount_component(form, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const form_changes = {};
			if (dirty & /*dids*/ 2) form_changes.dids = /*dids*/ ctx[1];
			form.$set(form_changes);
		},
		i(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(form, detaching);
		}
	};
}

// (49:6) <Route path="/edit/:id" let:params>
function create_default_slot_2(ctx) {
	let form;
	let current;

	form = new Form({
			props: {
				dids: /*dids*/ ctx[1],
				id: /*params*/ ctx[3].id,
				url: baseURL,
				getDids: /*getDids*/ ctx[2]
			}
		});

	return {
		c() {
			create_component(form.$$.fragment);
		},
		m(target, anchor) {
			mount_component(form, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const form_changes = {};
			if (dirty & /*dids*/ 2) form_changes.dids = /*dids*/ ctx[1];
			if (dirty & /*params*/ 8) form_changes.id = /*params*/ ctx[3].id;
			form.$set(form_changes);
		},
		i(local) {
			if (current) return;
			transition_in(form.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(form.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(form, detaching);
		}
	};
}

// (52:6) <Route path="/">
function create_default_slot_1(ctx) {
	let alldids;
	let current;
	alldids = new AllDids({ props: { dids: /*dids*/ ctx[1] } });

	return {
		c() {
			create_component(alldids.$$.fragment);
		},
		m(target, anchor) {
			mount_component(alldids, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const alldids_changes = {};
			if (dirty & /*dids*/ 2) alldids_changes.dids = /*dids*/ ctx[1];
			alldids.$set(alldids_changes);
		},
		i(local) {
			if (current) return;
			transition_in(alldids.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(alldids.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(alldids, detaching);
		}
	};
}

// (36:0) <Router url="{url}">
function create_default_slot(ctx) {
	let div;
	let h1;
	let t1;
	let link;
	let t2;
	let main;
	let route0;
	let t3;
	let route1;
	let t4;
	let route2;
	let t5;
	let route3;
	let current;

	link = new Link({
			props: {
				to: "/new",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	route0 = new Route({
			props: {
				path: "/post/:id",
				$$slots: {
					default: [
						create_default_slot_4,
						({ params }) => ({ 3: params }),
						({ params }) => params ? 8 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	route1 = new Route({
			props: {
				path: "/new",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	route2 = new Route({
			props: {
				path: "/edit/:id",
				$$slots: {
					default: [
						create_default_slot_2,
						({ params }) => ({ 3: params }),
						({ params }) => params ? 8 : 0
					]
				},
				$$scope: { ctx }
			}
		});

	route3 = new Route({
			props: {
				path: "/",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			h1 = element("h1");
			h1.textContent = "Its Time To Do The Things!";
			t1 = space();
			create_component(link.$$.fragment);
			t2 = space();
			main = element("main");
			create_component(route0.$$.fragment);
			t3 = space();
			create_component(route1.$$.fragment);
			t4 = space();
			create_component(route2.$$.fragment);
			t5 = space();
			create_component(route3.$$.fragment);
			attr(h1, "class", "h1");
			attr(div, "class", "App svelte-137aagz");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h1);
			append(div, t1);
			mount_component(link, div, null);
			append(div, t2);
			append(div, main);
			mount_component(route0, main, null);
			append(main, t3);
			mount_component(route1, main, null);
			append(main, t4);
			mount_component(route2, main, null);
			append(main, t5);
			mount_component(route3, main, null);
			current = true;
		},
		p(ctx, dirty) {
			const link_changes = {};

			if (dirty & /*$$scope*/ 16) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
			const route0_changes = {};

			if (dirty & /*$$scope, dids, params*/ 26) {
				route0_changes.$$scope = { dirty, ctx };
			}

			route0.$set(route0_changes);
			const route1_changes = {};

			if (dirty & /*$$scope, dids*/ 18) {
				route1_changes.$$scope = { dirty, ctx };
			}

			route1.$set(route1_changes);
			const route2_changes = {};

			if (dirty & /*$$scope, dids, params*/ 26) {
				route2_changes.$$scope = { dirty, ctx };
			}

			route2.$set(route2_changes);
			const route3_changes = {};

			if (dirty & /*$$scope, dids*/ 18) {
				route3_changes.$$scope = { dirty, ctx };
			}

			route3.$set(route3_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			transition_in(route0.$$.fragment, local);
			transition_in(route1.$$.fragment, local);
			transition_in(route2.$$.fragment, local);
			transition_in(route3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			transition_out(route0.$$.fragment, local);
			transition_out(route1.$$.fragment, local);
			transition_out(route2.$$.fragment, local);
			transition_out(route3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(link);
			destroy_component(route0);
			destroy_component(route1);
			destroy_component(route2);
			destroy_component(route3);
		}
	};
}

function create_fragment(ctx) {
	let router;
	let current;

	router = new Router({
			props: {
				url: /*url*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(router.$$.fragment);
		},
		m(target, anchor) {
			mount_component(router, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const router_changes = {};
			if (dirty & /*url*/ 1) router_changes.url = /*url*/ ctx[0];

			if (dirty & /*$$scope, dids*/ 18) {
				router_changes.$$scope = { dirty, ctx };
			}

			router.$set(router_changes);
		},
		i(local) {
			if (current) return;
			transition_in(router.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(router.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(router, detaching);
		}
	};
}

let baseURL = "https://ba-capstone.herokuapp.com/dids/"; //api url

function instance($$self, $$props, $$invalidate) {
	let { url = "" } = $$props;
	let dids; // variable to hold dids

	//function to get dids
	const getDids = async () => {
		const response = await fetch(baseURL);
		const data = await response.json();
		$$invalidate(1, dids = data);
	};

	onMount(() => getDids());

	$$self.$$set = $$props => {
		if ('url' in $$props) $$invalidate(0, url = $$props.url);
	};

	return [url, dids, getDids];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { url: 0 });
	}
}

export default App;