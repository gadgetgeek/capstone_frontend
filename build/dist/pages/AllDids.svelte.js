import './AllDids.svelte.css.proxy.js';
/* src/pages/AllDids.svelte generated by Svelte v3.44.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { Link } from "../../_snowpack/pkg/svelte-routing.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	child_ctx[3] = i;
	return child_ctx;
}

// (4:12) <Link to="{`/post/` + did._id}">
function create_default_slot(ctx) {
	let h2;
	let t_value = /*did*/ ctx[1].activity + "";
	let t;

	return {
		c() {
			h2 = element("h2");
			t = text(t_value);
			attr(h2, "class", "act");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},
		p(ctx, dirty) {
			if (dirty & /*dids*/ 1 && t_value !== (t_value = /*did*/ ctx[1].activity + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (2:4) {#each dids as did, index}
function create_each_block(ctx) {
	let article;
	let link;
	let t0;
	let h3;
	let t1_value = /*did*/ ctx[1].time + "";
	let t1;
	let t2;
	let current;

	link = new Link({
			props: {
				to: `/post/` + /*did*/ ctx[1]._id,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			article = element("article");
			create_component(link.$$.fragment);
			t0 = space();
			h3 = element("h3");
			t1 = text(t1_value);
			t2 = space();
			attr(h3, "class", "time");
			attr(article, "class", "line svelte-1vs6xk2");
		},
		m(target, anchor) {
			insert(target, article, anchor);
			mount_component(link, article, null);
			append(article, t0);
			append(article, h3);
			append(h3, t1);
			append(article, t2);
			current = true;
		},
		p(ctx, dirty) {
			const link_changes = {};
			if (dirty & /*dids*/ 1) link_changes.to = `/post/` + /*did*/ ctx[1]._id;

			if (dirty & /*$$scope, dids*/ 17) {
				link_changes.$$scope = { dirty, ctx };
			}

			link.$set(link_changes);
			if ((!current || dirty & /*dids*/ 1) && t1_value !== (t1_value = /*did*/ ctx[1].time + "")) set_data(t1, t1_value);
		},
		i(local) {
			if (current) return;
			transition_in(link.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(article);
			destroy_component(link);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current;
	let each_value = /*dids*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*dids*/ 1) {
				each_value = /*dids*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { dids = [] } = $$props;

	$$self.$$set = $$props => {
		if ('dids' in $$props) $$invalidate(0, dids = $$props.dids);
	};

	return [dids];
}

class AllDids extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { dids: 0 });
	}
}

export default AllDids;