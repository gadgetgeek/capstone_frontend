/* src/pages/SingleDid.svelte generated by Svelte v3.44.3 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from "../../_snowpack/pkg/svelte/internal.js";

import { Link, navigate } from "../../_snowpack/pkg/svelte-routing.js";
import { onMount } from "../../_snowpack/pkg/svelte.js";

function create_default_slot_1(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "Back to Main";
			attr(button, "class", "btn1");
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

// (7:4) <Link to={'/edit/' + post._id }>
function create_default_slot(ctx) {
	let button;

	return {
		c() {
			button = element("button");
			button.textContent = "Edit the Did";
		},
		m(target, anchor) {
			insert(target, button, anchor);
		},
		d(detaching) {
			if (detaching) detach(button);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let h2;
	let t1;
	let h3;
	let t3;
	let link0;
	let t4;
	let link1;
	let t5;
	let button;
	let current;
	let mounted;
	let dispose;

	link0 = new Link({
			props: {
				to: "/",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	link1 = new Link({
			props: {
				to: '/edit/' + /*post*/ ctx[0]._id,
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			div = element("div");
			h2 = element("h2");
			h2.textContent = `${/*post*/ ctx[0].activity}`;
			t1 = space();
			h3 = element("h3");
			h3.textContent = `${/*post*/ ctx[0].time}`;
			t3 = space();
			create_component(link0.$$.fragment);
			t4 = space();
			create_component(link1.$$.fragment);
			t5 = space();
			button = element("button");
			button.textContent = "Delete The Did";
			attr(div, "class", "row1");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h2);
			append(div, t1);
			append(div, h3);
			append(div, t3);
			mount_component(link0, div, null);
			append(div, t4);
			mount_component(link1, div, null);
			append(div, t5);
			append(div, button);
			current = true;

			if (!mounted) {
				dispose = listen(button, "click", /*deleteDid*/ ctx[1]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const link0_changes = {};

			if (dirty & /*$$scope*/ 64) {
				link0_changes.$$scope = { dirty, ctx };
			}

			link0.$set(link0_changes);
			const link1_changes = {};

			if (dirty & /*$$scope*/ 64) {
				link1_changes.$$scope = { dirty, ctx };
			}

			link1.$set(link1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(link0.$$.fragment, local);
			transition_in(link1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(link0.$$.fragment, local);
			transition_out(link1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(link0);
			destroy_component(link1);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { dids } = $$props;
	let { id } = $$props;
	let { getDids } = $$props;
	let { url } = $$props;
	let post = dids.find(p => p._id == id);

	//delete dids function
	const deleteDid = async () => {
		await fetch(url + id, { method: "delete" });
		getDids();
		navigate("/", { replace: true });
	};

	$$self.$$set = $$props => {
		if ('dids' in $$props) $$invalidate(2, dids = $$props.dids);
		if ('id' in $$props) $$invalidate(3, id = $$props.id);
		if ('getDids' in $$props) $$invalidate(4, getDids = $$props.getDids);
		if ('url' in $$props) $$invalidate(5, url = $$props.url);
	};

	return [post, deleteDid, dids, id, getDids, url];
}

class SingleDid extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { dids: 2, id: 3, getDids: 4, url: 5 });
	}
}

export default SingleDid;